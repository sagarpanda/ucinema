{"version":3,"sources":["config.js","utils/fetchGoogleSheet.js","utils/httpRequest.js","components/DataProvider.js","utils/routes.js","hooks/useSearch.js","containers/AppMenu.js","components/VideoCard.js","components/VideoCardGroup.js","containers/Home.js","containers/Movies.js","containers/TvSeries.js","containers/IntraMovies.js","containers/WatchVideo.js","containers/IntraWatchVideo.js","components/DetectRouteChange.js","App.js","serviceWorker.js","index.js"],"names":["config","intraBaseUrl","googleSheetId","checkerUrl","movieUrl","a","fetch","then","response","status","json","records","data","fetchGoogleSheet","url","httpRequest","DataContext","React","createContext","initialState","isLoading","subData","intranet","cloudData","cloudSubData","reducer","state","action","type","payload","Error","DataProvider","props","useReducer","dispatch","useEffect","dd","filter","d","parentId","temp","hidden","responseData","values","Provider","value","children","routes","baseRoute","useSearch","useState","loading","results","setData","history","useHistory","handleSearchChange","useCallback","e","item","title","toLowerCase","indexOf","handleResultSelect","result","push","id","withRouter","activeItem","location","pathname","useContext","Menu","fixed","inverted","Item","header","as","Link","name","active","href","to","position","Responsive","Search","onSearchChange","onResultSelect","minWidth","Container","maxWidth","style","padding","input","width","paddingBottom","VideoCard","imgUrl","gUrl","createdDate","intra","Card","className","Image","size","src","wrapped","ui","Content","Description","VideoCardGroup","list","Group","map","key","Home","Helmet","content","Movies","movies","category","TvSeries","series","IntraMovies","console","log","Episodes","eps","epId","Label","paddingTop","dt","icon","WatchVideo","useParams","subname","imdbInfo","setImdbInfo","imdbID","extras","widerImgUrl","placeholder","length","Segment","Header","Subheader","desc","Embed","source","iframe","allowFullScreen","items","image","Poster","Title","description","Plot","meta","Year","Released","Genre","Director","Writer","extra","IntraWatchVideo","DetectRouteChange","listen","ReactGA","set","page","pageview","App","exact","path","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message","initialize"],"mappings":"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","file":"static/js/main.c4bef40a.chunk.js","sourcesContent":["const config = {\n  intraBaseUrl: 'https://192.168.29.233:9000',\n  googleSheetId: '1xqxT4Q0Zh4n9W5GYew-ltxfb4oG42icVlHQEX_RErQE',\n  checkerUrl: '/checker',\n  movieUrl: '/movies'\n}\n\nexport default config;","async function fetchGoogleSheet() {\n\tconst fetchUrl = `https://mock-serv.herokuapp.com/api/cinema`;\n\tconst data = await fetch(fetchUrl).then((response) => {\n\t\tif (response.status === 200) {\n\t\t\treturn response.json();\n\t\t} else {\n\t\t\treturn { records: [] };\n\t\t}\n\t});\n\treturn data.records;\n}\n\nexport default fetchGoogleSheet;\n","async function httpRequest(url) {\n  const data = await fetch(url).then(response => {\n    if(response.status === 200) {\n      const responseData = response.json();\n      return { data: responseData, status: true };\n    } else {\n      return { status: false };\n    }\n  });\n  return data;\n}\n\nexport default httpRequest;","import React, { useEffect, useReducer } from 'react';\nimport config from '../config';\nimport fetchGoogleSheet from '../utils/fetchGoogleSheet';\nimport httpRequest from '../utils/httpRequest';\n\nconst DataContext = React.createContext({});\n\nconst initialState = {\n\tisLoading: true,\n\tdata: [],\n\tsubData: {},\n\tintranet: false,\n\tcloudData: [],\n\tcloudSubData: {},\n};\n\nfunction reducer(state, action) {\n\tswitch (action.type) {\n\t\tcase 'fetchGoogleSuccess':\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tisLoading: false,\n\t\t\t\tdata: action.payload.data,\n\t\t\t\tsubData: action.payload.subData,\n\t\t\t};\n\t\tcase 'intraSuccess':\n\t\t\treturn { ...state, intranet: true };\n\t\tcase 'fetchCloudSuccess':\n\t\t\treturn { ...state, cloudData: action.payload };\n\t\tcase 'update':\n\t\t\treturn { ...state, ...action.payload };\n\t\tdefault:\n\t\t\tthrow new Error();\n\t}\n}\n\nconst DataProvider = (props) => {\n\tconst [state, dispatch] = useReducer(reducer, initialState);\n\tuseEffect(() => {\n\t\tfetchGoogleSheet()\n\t\t\t.then((dd) => {\n\t\t\t\tconst subData = {};\n\t\t\t\tconst data = dd.filter((d) => {\n\t\t\t\t\tif (d.parentId) {\n\t\t\t\t\t\tconst temp = subData[d.parentId] || [];\n\t\t\t\t\t\tsubData[d.parentId] = [...temp, d];\n\t\t\t\t\t}\n\t\t\t\t\treturn !d.hidden && !d.parentId;\n\t\t\t\t});\n\t\t\t\tdispatch({ type: 'fetchGoogleSuccess', payload: { data, subData } });\n\t\t\t\treturn data;\n\t\t\t})\n\t\t\t.then((dd) => {\n\t\t\t\tconst intraData = httpRequest(\n\t\t\t\t\t`${config.intraBaseUrl}${config.checkerUrl}`\n\t\t\t\t);\n\t\t\t\treturn intraData;\n\t\t\t})\n\t\t\t.then((dd) => {\n\t\t\t\tif (dd.status) {\n\t\t\t\t\tdispatch({ type: 'intraSuccess' });\n\n\t\t\t\t\tfetch(`${config.intraBaseUrl}${config.movieUrl}`)\n\t\t\t\t\t\t.then((response) => {\n\t\t\t\t\t\t\tif (response.status === 200) {\n\t\t\t\t\t\t\t\treturn response.json();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.then((responseData) => {\n\t\t\t\t\t\t\tdispatch({ type: 'fetchCloudSuccess', payload: responseData });\n\t\t\t\t\t\t});\n\t\t\t\t\treturn true;\n\t\t\t\t} else {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t});\n\t}, []);\n\tconst values = { ...state, dispatch };\n\treturn (\n\t\t<DataContext.Provider value={values}>{props.children}</DataContext.Provider>\n\t);\n};\n\nexport { DataContext };\n\nexport default DataProvider;\n","const routes = {\n  baseRoute: ''\n};\n\nexport default routes;","import { useState, useCallback } from 'react';\nimport { useHistory } from \"react-router-dom\";\n\nconst useSearch = (records) => {\n  const initData = { loading: false, value: '', results: [] };\n\n  const [ data, setData ] = useState(initData);\n  const history = useHistory();\n\n  const handleSearchChange = useCallback((e, { value }) => {\n    setData({ loading: true, value, results: [] });\n    const results = records.filter(item => item.title.toLowerCase().indexOf(value) > -1);\n    setData({ loading: false, value, results });\n  }, [records]);\n\n  const handleResultSelect = useCallback((e, { result }) => {\n    setData({ loading: false, value: '', results: [] });\n    history.push(`/watch/${result.id}`);\n  }, [history]);\n\n  return {\n    data,\n    handleSearchChange,\n    handleResultSelect\n  }\n};\n\nexport default useSearch;","import React, { useContext } from 'react';\nimport { Menu, Search, Responsive, Container } from 'semantic-ui-react';\nimport { withRouter } from \"react-router\";\nimport { Link } from \"react-router-dom\";\nimport { DataContext } from '../components/DataProvider';\nimport routes from \"../utils/routes\";\nimport useSearch from '../hooks/useSearch';\n\nconst baseRoute = routes.baseRoute;\n\nconst AppMenu = ({ location }) => {\n    const activeItem = location.pathname;\n    const values = useContext(DataContext);\n\n    const { data, handleSearchChange, handleResultSelect } = useSearch(values.data);\n    \n    return (\n      <>\n        <Menu fixed='top' inverted>\n          <Menu.Item header>uCinema</Menu.Item>\n          <Menu.Item\n            as={Link}\n            name='home'\n            active={activeItem === `${baseRoute}/`}\n            href={`${baseRoute}/`}\n            to={`${baseRoute}/`}\n          />\n          <Menu.Item\n            as={Link}\n            name='movies'\n            active={activeItem === `${baseRoute}/movies`}\n            href={`${baseRoute}/movies`}\n            to={`${baseRoute}/movies`}\n          />\n          <Menu.Item\n            as={Link}\n            name='tv-series'\n            active={activeItem === `${baseRoute}/tv-series`}\n            href={`${baseRoute}/tv-series`}\n            to={`${baseRoute}/tv-series`}\n          />\n          {\n            values.intranet && (\n              <Menu.Item\n                as={Link}\n                name='intra-movies'\n                active={activeItem === `${baseRoute}/intra-movies`}\n                href={`${baseRoute}/intra-movies`}\n                to={`${baseRoute}/intra-movies`}\n              />\n            )\n          }\n          <Menu.Menu position='right'>\n            <Menu.Item>\n              <Responsive\n                as={Search}\n                loading={data.loading}\n                results={data.results}\n                value={data.value}\n                onSearchChange={handleSearchChange}\n                onResultSelect={handleResultSelect}\n                minWidth={550}\n              />\n            </Menu.Item>\n          </Menu.Menu>\n        </Menu>\n        <Responsive\n          as={Container}\n          maxWidth={550}\n          style={{ padding: '60px 0 20px' }}>\n          <Search\n            loading={data.loading}\n            results={data.results}\n            value={data.value}\n            onSearchChange={handleSearchChange}\n            onResultSelect={handleResultSelect}\n            minWidth={550}\n            input={{ style: { width: '100%' } }}\n          />\n        </Responsive>\n        <Responsive\n          as=\"div\"\n          minWidth={550}\n          style={{ paddingBottom: 84 }}\n        />\n      </>\n    );\n};\n\nexport default withRouter(AppMenu);","import React from 'react';\nimport { Card, Image } from 'semantic-ui-react';\nimport { Link } from \"react-router-dom\";\nimport routes from \"./../utils/routes\";\nimport './VideoCard.css';\n\nconst baseRoute = routes.baseRoute;\n\nconst VideoCard = ({ id, title, imgUrl, createdDate, intra }) => {\n    const gUrl = imgUrl || 'https://i.imgur.com/0FX7ZPe.jpg';\n    const href = intra ? `${baseRoute}/intra/watch/${id}` : `${baseRoute}/watch/${id}`;\n    return (\n        <Card as={Link} href={href} to={href} className=\"video-card\">\n            <Image className=\"fixed-height\" size=\"medium\" src={gUrl} wrapped ui={false} />\n            <Card.Content className=\"content-over-image\">\n                {/*<Card.Meta>\n                    <span className='date'>Added on {createdDate}</span>\n                </Card.Meta>*/}\n                <Card.Description className=\"color-white\">\n                {title}\n                </Card.Description>\n            </Card.Content>\n        </Card>\n    );\n};\n\nexport default VideoCard;","import React from 'react';\nimport { Card } from 'semantic-ui-react';\nimport VideoCard from '../components/VideoCard';\n\nconst VideoCardGroup = ({ list, intra }) => {\n  return (\n    <Card.Group>\n        {\n            list.map(item => (\n              <VideoCard\n                intra={intra}\n                key={item.id}\n                id={item.id}\n                title={item.title}\n                imgUrl={item.imgUrl}\n                createdDate={item.createdDate}\n              />\n            ))\n        }\n    </Card.Group>\n  );\n};\n\nexport default VideoCardGroup;","import React, { useContext } from 'react';\nimport { Helmet } from 'react-helmet';\nimport { Container } from 'semantic-ui-react';\nimport { DataContext } from '../components/DataProvider';\nimport VideoCardGroup from '../components/VideoCardGroup';\n\nconst Home = () => {\n    const values = useContext(DataContext);\n    \n    return (\n        <Container>\n            <Helmet>\n                <title>uCinema</title>\n                <meta name=\"description\" content=\"Watch movies on uCinema\" />\n            </Helmet>\n            <VideoCardGroup list={values.data} />\n        </Container>\n    );\n};\n\nexport default Home;","import React, { useContext } from 'react';\nimport { Helmet } from 'react-helmet';\nimport { Container } from 'semantic-ui-react';\nimport { DataContext } from '../components/DataProvider';\nimport VideoCardGroup from '../components/VideoCardGroup';\n\nconst Movies = () => {\n    const values = useContext(DataContext);\n    const movies = values.data.filter(item => item.category === 'movie');\n\n    return (\n        <Container>\n            <Helmet>\n                <title>Movies | uCinema</title>\n                <meta name=\"description\" content=\"Watch movies on uCinema\" />\n            </Helmet>\n            <VideoCardGroup list={movies} />\n        </Container>\n    );\n};\n\nexport default Movies;","import React, { useContext } from 'react';\nimport { Helmet } from 'react-helmet';\nimport { Container } from 'semantic-ui-react';\nimport { DataContext } from '../components/DataProvider';\nimport VideoCardGroup from '../components/VideoCardGroup';\n\nconst TvSeries = () => {\n    const values = useContext(DataContext);\n    const series = values.data.filter(item => item.category === 'series');\n\n    return (\n        <Container>\n            <Helmet>\n                <title>Tv Series | uCinema</title>\n                <meta name=\"description\" content=\"Watch tv series on uCinema\" />\n            </Helmet>\n            <VideoCardGroup list={series} />\n        </Container>\n    );\n};\n\nexport default TvSeries;","import React, { useContext } from 'react';\nimport { Helmet } from 'react-helmet';\nimport { Container } from 'semantic-ui-react';\nimport { DataContext } from '../components/DataProvider';\nimport VideoCardGroup from '../components/VideoCardGroup';\n\nconst IntraMovies = () => {\n    const values = useContext(DataContext);\n    console.log(values);\n    \n    return (\n        <Container>\n            <Helmet>\n                <title>IntraMovies | uCinema</title>\n                <meta name=\"description\" content=\"Watch movies on uCinema\" />\n            </Helmet>\n            <VideoCardGroup intra list={values.cloudData} />\n        </Container>\n    );\n};\n\nexport default IntraMovies;","import React, { useContext, useEffect, useState } from 'react';\nimport { useParams } from 'react-router';\nimport { Link } from 'react-router-dom';\nimport { Helmet } from 'react-helmet';\nimport { Header, Container, Segment, Image, Item, Embed, Label } from 'semantic-ui-react';\nimport { DataContext } from '../components/DataProvider';\nimport routes from \"./../utils/routes\";\n\nconst baseRoute = routes.baseRoute;\n\nconst Episodes = ({eps, epId}) => {\n    return (\n        <Label.Group style={{paddingTop: '20px'}}>\n        {\n            eps.map(dt => (\n                <Label\n                    as={Link}\n                    key={dt.title}\n                    content={dt.title}\n                    icon='mail'\n                    active={(epId === dt.id)}\n                    href={`${baseRoute}/watch/${dt.parentId}/${dt.id}`}\n                    to={`${baseRoute}/watch/${dt.parentId}/${dt.id}`}\n                />\n            ))\n        }\n        </Label.Group>\n    );\n};\n\nconst WatchVideo = () => {\n    const values = useContext(DataContext);\n    const { name, subname } = useParams();\n    \n    let item = values.data.filter(d => name === d.id)[0];\n    const [ imdbInfo, setImdbInfo ] = useState(null);\n\n    useEffect(() => {\n        if(item && item.imdbID) {\n            fetch(`http://www.omdbapi.com/?i=${item.imdbID}&apikey=c11086ed&plot=full`)\n                .then(response => response.json())\n                .then(data => setImdbInfo(data));\n        }\n    }, [item]);\n\n    const extras = item && item.widerImgUrl ? { placeholder: item.widerImgUrl } : {};\n\n    let eps = [];\n    if(item) {\n        eps = values.subData[item.id] || [];\n    }\n\n    let epId = subname;\n    if(!epId) {\n        if(eps.length > 0) {\n            epId = eps[0].id;\n        }\n    }\n\n    if(eps.length > 0) {\n        let { title, url, type } = eps.filter(d => epId === d.id)[0] || {};\n        item = { ...item, title, url, type };\n    }\n\n    return (\n        <Container>\n            { item && (\n                <Helmet>\n                    <title>Watch {item.title} | uCinema</title>\n                    <meta name=\"description\" content={`Watch ${item.title}`} />\n                </Helmet>\n            ) }\n            { values.isLoading && (\n                <Segment loading>\n                    <Image src='https://react.semantic-ui.com/images/wireframe/paragraph.png' />\n                </Segment>\n            )}\n            { item && (\n                <Header as='h2'>\n                    {item.title}\n                    <Header.Subheader>\n                    {item.desc}\n                    </Header.Subheader>\n                </Header>\n            ) }\n            { item && (item.type === 'youtube' ? (<Embed\n                    id={item.url}\n                    source='youtube'\n                    iframe={{ allowFullScreen: true }}\n                    {...extras}\n                />) : (<Embed\n                    url={item.url}\n                    iframe={{ allowFullScreen: true }}\n                    {...extras}\n                />))\n            }\n            <Episodes eps={eps} epId={epId} />\n            { imdbInfo && (\n                    <Item.Group\n                        items={[{\n                            image: imdbInfo.Poster,\n                            header: imdbInfo.Title,\n                            description: imdbInfo.Plot,\n                            meta: (\n                            <div>\n                                <b>Year:</b> {imdbInfo.Year} <br />\n                                <b>Released:</b> {imdbInfo.Released} <br />\n                                <b>Genre:</b> {imdbInfo.Genre} <br />\n                                <b>Director:</b> {imdbInfo.Director} <br />\n                                <b>Writer:</b> {imdbInfo.Writer}\n                            </div>\n                            ),\n                            extra: '',\n                        }]}\n                    />\n                )\n            }\n            <br /><br /><br />\n        </Container>\n    );\n};\n\nexport default WatchVideo;","import React, { useContext, useEffect, useState } from 'react';\nimport { useParams } from 'react-router';\nimport { Link } from 'react-router-dom';\nimport { Helmet } from 'react-helmet';\nimport { Header, Container, Segment, Image, Item, Embed, Label } from 'semantic-ui-react';\nimport { DataContext } from '../components/DataProvider';\nimport routes from \"./../utils/routes\";\nimport config from '../config';\n\nconst baseRoute = routes.baseRoute;\n\nconst Episodes = ({eps, epId}) => {\n    return (\n        <Label.Group style={{paddingTop: '20px'}}>\n        {\n            eps.map(dt => (\n                <Label\n                    as={Link}\n                    key={dt.title}\n                    content={dt.title}\n                    icon='mail'\n                    active={(epId === dt.id)}\n                    href={`${baseRoute}/intra/watch/${dt.parentId}/${dt.id}`}\n                    to={`${baseRoute}/intra/watch/${dt.parentId}/${dt.id}`}\n                />\n            ))\n        }\n        </Label.Group>\n    );\n};\n\nconst IntraWatchVideo = () => {\n    const values = useContext(DataContext);\n    const { name, subname } = useParams();\n    \n    let item = values.cloudData.filter(d => name === d.id)[0];\n    const [ imdbInfo, setImdbInfo ] = useState(null);\n\n    useEffect(() => {\n        if(item && item.imdbID) {\n            fetch(`http://www.omdbapi.com/?i=${item.imdbID}&apikey=c11086ed&plot=full`)\n                .then(response => response.json())\n                .then(data => setImdbInfo(data));\n        }\n    }, [item]);\n\n    const extras = item && item.widerImgUrl ? { placeholder: item.widerImgUrl } : {};\n\n    let eps = [];\n    if(item) {\n        eps = values.cloudSubData[item.id] || [];\n    }\n\n    let epId = subname;\n    if(!epId) {\n        if(eps.length > 0) {\n            epId = eps[0].id;\n        }\n    }\n\n    if(eps.length > 0) {\n        let { title, url, type } = eps.filter(d => epId === d.id)[0] || {};\n        item = { ...item, title, url, type };\n    }\n\n    return (\n        <Container>\n            { item && (\n                <Helmet>\n                    <title>Watch {item.title} | uCinema</title>\n                    <meta name=\"description\" content={`Watch ${item.title}`} />\n                </Helmet>\n            ) }\n            { values.isLoading && (\n                <Segment loading>\n                    <Image src='https://react.semantic-ui.com/images/wireframe/paragraph.png' />\n                </Segment>\n            )}\n            { item && (\n                <Header as='h2'>\n                    {item.title}\n                    <Header.Subheader>\n                    {item.desc}\n                    </Header.Subheader>\n                </Header>\n            ) }\n            { item && (item.type === 'youtube' ? (<Embed\n                    id={item.url}\n                    source='youtube'\n                    iframe={{ allowFullScreen: true }}\n                    {...extras}\n                />) : (<Embed\n                    url={`${config.intraBaseUrl}${item.url}`}\n                    iframe={{ allowFullScreen: true }}\n                    {...extras}\n                />))\n            }\n            <Episodes eps={eps} epId={epId} />\n            { imdbInfo && (\n                    <Item.Group\n                        items={[{\n                            image: imdbInfo.Poster,\n                            header: imdbInfo.Title,\n                            description: imdbInfo.Plot,\n                            meta: (\n                            <div>\n                                <b>Year:</b> {imdbInfo.Year} <br />\n                                <b>Released:</b> {imdbInfo.Released} <br />\n                                <b>Genre:</b> {imdbInfo.Genre} <br />\n                                <b>Director:</b> {imdbInfo.Director} <br />\n                                <b>Writer:</b> {imdbInfo.Writer}\n                            </div>\n                            ),\n                            extra: '',\n                        }]}\n                    />\n                )\n            }\n            <br /><br /><br />\n        </Container>\n    );\n};\n\nexport default IntraWatchVideo;","import React, { useEffect } from 'react';\nimport { useHistory } from \"react-router-dom\";\nimport ReactGA from 'react-ga';\n\nconst DetectRouteChange = () => {\n  const history = useHistory();\n  useEffect(() => {\n      return history.listen((location) => {\n          ReactGA.set({ page: location.pathname });\n          ReactGA.pageview(location.pathname)\n      });\n  }, [history]);\n\n  return <div />\n};\n\nexport default DetectRouteChange;","import React from 'react';\nimport { HashRouter as Router, Switch, Route } from \"react-router-dom\";\nimport 'semantic-ui-css/semantic.min.css';\nimport AppMenu from './containers/AppMenu';\nimport Home from './containers/Home';\nimport Movies from './containers/Movies';\nimport TvSeries from './containers/TvSeries';\nimport IntraMovies from './containers/IntraMovies';\nimport WatchVideo from './containers/WatchVideo';\nimport IntraWatchVideo from './containers/IntraWatchVideo';\nimport DetectRouteChange from './components/DetectRouteChange';\nimport routes from \"./utils/routes\"\n\nconst baseRoute = routes.baseRoute;\n\nfunction App() {\n  return (\n    <Router>\n      <div>\n        <DetectRouteChange />\n        <AppMenu />\n        <Switch>\n          <Route exact path={`${baseRoute}/`}>\n            <Home />\n          </Route>\n          <Route path={`${baseRoute}/movies`}>\n            <Movies />\n          </Route>\n          <Route path={`${baseRoute}/tv-series`}>\n            <TvSeries />\n          </Route>\n          <Route path={`${baseRoute}/watch/:name/:subname?`}>\n            <WatchVideo />\n          </Route>\n          <Route path={`${baseRoute}/intra-movies`}>\n            <IntraMovies />\n          </Route>\n          <Route path={`${baseRoute}/intra/watch/:name/:subname?`}>\n            <IntraWatchVideo />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport ReactGA from 'react-ga';\nimport DataProvider from './components/DataProvider';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <DataProvider>\n      <App />\n    </DataProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\nReactGA.initialize('UA-17018575-1');\n"],"sourceRoot":""}