{"version":3,"sources":["utils/fetchGoogleSheet.js","components/DataProvider.js","components/AppMenu.js","components/VideoCard.js","containers/Home.js","containers/Movies.js","containers/TvSeries.js","containers/WatchVideo.js","App.js","serviceWorker.js","index.js"],"names":["a","spreadsheetId","sheetNum","tab","fetchUrl","fetch","then","response","status","json","feed","entry","data","rowData","reduce","prev","curr","row","col","content","rowIndex","colIndex","fetchGoogleSheet","DataContext","React","createContext","DataProvider","props","useState","isLoading","setRowData","useEffect","dd","map","d","id","col0","title","col1","desc","col2","url","col3","imgUrl","col4","widerImgUrl","col5","category","col6","type","col7","createdDate","col8","imdbID","col9","Provider","value","children","withRouter","activeItem","location","pathname","Menu","inverted","Item","header","as","Link","name","active","href","to","position","Input","icon","placeholder","VideoCard","gUrl","Card","className","Image","size","src","wrapped","ui","Content","Description","Home","values","useContext","Container","Group","item","key","Movies","TvSeries","match","filter","params","imdbInfo","setImdbInfo","extras","Segment","loading","Header","Subheader","Embed","source","iframe","allowFullScreen","items","image","Poster","Title","description","Plot","meta","Year","Released","Genre","Director","Writer","extra","App","exact","path","Boolean","window","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.fc8e0513.chunk.js","sourcesContent":["async function fetchGoogleSheet({spreadsheetId, sheetNum}) {\n  const tab = sheetNum || 1;\n  const fetchUrl = `https://spreadsheets.google.com/feeds/cells/${spreadsheetId}/${tab}/public/full?alt=json`;\n  const data = await fetch(fetchUrl).then(response => {\n    if(response.status === 200) {\n      return response.json();\n    } else {\n      return { feed: { entry: [] }};\n    }\n  });\n  // let count = 0;\n  const rowData = data.feed.entry.reduce((prev, curr) => {\n     const { row, col } = curr['gs$cell'];\n     const content = curr.content['$t'];\n     const rowIndex = row - 1;\n     const colIndex = col - 1;\n     if(prev[rowIndex]) {\n       prev[rowIndex][`col${colIndex}`] = content;\n     } else {\n       prev[rowIndex] = { [`col${colIndex}`]: content };\n     }\n     return prev;\n  }, []);\n  return rowData;\n}\n\nexport default fetchGoogleSheet;","import React, { useState, useEffect } from 'react';\nimport fetchGoogleSheet from '../utils/fetchGoogleSheet';\n\nconst DataContext = React.createContext({});\n\nconst DataProvider = (props) => {\n    const [ rowData, setRowData ] = useState({ isLoading: true, data: [] });\n    useEffect(() => {\n        fetchGoogleSheet({\n            spreadsheetId: '1xqxT4Q0Zh4n9W5GYew-ltxfb4oG42icVlHQEX_RErQE',\n            sheetNum: 1\n        }).then(dd => {\n            const data = dd.map(d => ({\n                id: d.col0,\n                title: d.col1,\n                desc: d.col2,\n                url: d.col3,\n                imgUrl: d.col4,\n                widerImgUrl: d.col5,\n                category: d.col6,\n                type: d.col7,\n                createdDate: d.col8,\n                imdbID: d.col9\n            }));\n            setRowData({ isLoading: false, data });\n            return data;\n        });\n    }, [])\n    return (\n        <DataContext.Provider value={rowData}>\n          {props.children}\n        </DataContext.Provider>\n    );\n};\n\nexport { DataContext };\n\nexport default DataProvider;","import React from 'react';\nimport { Input, Menu } from 'semantic-ui-react';\nimport { withRouter } from \"react-router\";\nimport { Link } from \"react-router-dom\";\n\nconst AppMenu = ({ location }) => {\n    const activeItem = location.pathname;\n    \n    return (\n        <Menu inverted>\n          <Menu.Item header>uCinema</Menu.Item>\n          <Menu.Item\n            as={Link}\n            name='home'\n            active={activeItem === '/'}\n            href='/'\n            to=\"/\"\n          />\n          <Menu.Item\n            as={Link}\n            name='movies'\n            active={activeItem === '/movies'}\n            href='/movies'\n            to=\"/movies\"\n          />\n          <Menu.Item\n            as={Link}\n            name='tv-series'\n            active={activeItem === '/tv-series'}\n            href='/tv-series'\n            to=\"/tv-series\"\n          />\n          <Menu.Menu position='right'>\n            <Menu.Item>\n              <Input icon='search' placeholder='Search...' />\n            </Menu.Item>\n          </Menu.Menu>\n        </Menu>\n    );\n};\n\nexport default withRouter(AppMenu);","import React from 'react';\nimport { Card, Image } from 'semantic-ui-react';\nimport { Link } from \"react-router-dom\";\nimport './VideoCard.css';\n\nconst VideoCard = ({ id, title, imgUrl, createdDate }) => {\n    const gUrl = imgUrl || 'https://react.semantic-ui.com/images/avatar/large/matthew.png';\n    return (\n        <Card as={Link} href={`/watch/${id}`} to={`/watch/${id}`} className=\"video-card\">\n            <Image className=\"fixed-height\" size=\"medium\" src={gUrl} wrapped ui={false} />\n            <Card.Content className=\"content-over-image\">\n                {/*<Card.Meta>\n                    <span className='date'>Added on {createdDate}</span>\n                </Card.Meta>*/}\n                <Card.Description className=\"color-white\">\n                {title}\n                </Card.Description>\n            </Card.Content>\n        </Card>\n    );\n};\n\nexport default VideoCard;","import React, { useContext } from 'react';\nimport { Container, Card } from 'semantic-ui-react';\nimport { DataContext } from '../components/DataProvider';\nimport VideoCard from '../components/VideoCard';\n\nconst Home = () => {\n    const values = useContext(DataContext);\n    \n    return (\n        <Container>\n            <Card.Group>\n                {\n                    values.data.map(item => (\n                        <VideoCard\n                            key={item.id}\n                            id={item.id}\n                            title={item.title}\n                            imgUrl={item.imgUrl}\n                            createdDate={item.createdDate}\n                        />\n                    ))\n                }\n            </Card.Group>\n        </Container>\n    );\n};\n\nexport default Home;","import React from 'react';\nimport { Container } from 'semantic-ui-react';\n\nconst Movies = () => {\n    return (\n        <Container>\n            Movies - Work In Progress\n        </Container>\n    );\n};\n\nexport default Movies;","import React from 'react';\nimport { Container } from 'semantic-ui-react';\n\nconst TvSeries = () => {\n    return (\n        <Container>\n            TvSeries - Work In Progress\n        </Container>\n    );\n};\n\nexport default TvSeries;","import React, { useContext, useEffect, useState } from 'react';\nimport { withRouter } from 'react-router';\nimport { Header, Container, Segment, Image, Item, Embed } from 'semantic-ui-react';\nimport { DataContext } from '../components/DataProvider';\n\nconst WatchVideo = ({ match }) => {\n    const values = useContext(DataContext);\n    const item = values.data.filter(d => match.params.name === d.id)[0];\n    const [ imdbInfo, setImdbInfo ] = useState(null);\n\n    useEffect(() => {\n        if(item && item.imdbID) {\n            fetch(`http://www.omdbapi.com/?i=${item.imdbID}&apikey=c11086ed&plot=full`)\n                .then(response => response.json())\n                .then(data => setImdbInfo(data));\n        }\n    }, [item]);\n\n    const extras = item && item.widerImgUrl ? { placeholder: item.widerImgUrl } : {};\n\n    return (\n        <Container>\n            { values.isLoading && (\n                <Segment loading>\n                    <Image src='https://react.semantic-ui.com/images/wireframe/paragraph.png' />\n                </Segment>\n            )}\n            { item && (\n                <Header as='h2'>\n                    {item.title}\n                    <Header.Subheader>\n                    {item.desc}\n                    </Header.Subheader>\n                </Header>\n            ) }\n            { item && (item.type === 'youtube' ? (<Embed\n                    id={item.url}\n                    source='youtube'\n                    iframe={{ allowFullScreen: true }}\n                    {...extras}\n                />) : (<Embed\n                    url={item.url}\n                    iframe={{ allowFullScreen: true }}\n                    {...extras}\n                />))\n            }\n            { imdbInfo && (\n                    <Item.Group\n                        items={[{\n                            image: imdbInfo.Poster,\n                            header: imdbInfo.Title,\n                            description: imdbInfo.Plot,\n                            meta: (\n                            <div>\n                                <b>Year:</b> {imdbInfo.Year} <br />\n                                <b>Released:</b> {imdbInfo.Released} <br />\n                                <b>Genre:</b> {imdbInfo.Genre} <br />\n                                <b>Director:</b> {imdbInfo.Director} <br />\n                                <b>Writer:</b> {imdbInfo.Writer}\n                            </div>\n                            ),\n                            extra: '',\n                        }]}\n                    />\n                )\n            }\n            <br /><br /><br />\n        </Container>\n    );\n};\n\nexport default withRouter(WatchVideo);","import React from 'react';\nimport { Segment } from 'semantic-ui-react';\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport 'semantic-ui-css/semantic.min.css';\nimport AppMenu from './components/AppMenu';\nimport Home from './containers/Home';\nimport Movies from './containers/Movies';\nimport TvSeries from './containers/TvSeries';\nimport WatchVideo from './containers/WatchVideo';\n\nfunction App() {\n  return (\n    <Router>\n      <Segment>\n        <AppMenu />\n        <Switch>\n          <Route exact path=\"/\">\n            <Home />\n          </Route>\n          <Route path=\"/movies\">\n            <Movies />\n          </Route>\n          <Route path=\"/tv-series\">\n            <TvSeries />\n          </Route>\n          <Route path=\"/watch/:name\">\n            <WatchVideo />\n          </Route>\n        </Switch>\n      </Segment>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import './index.css';\nimport DataProvider from './components/DataProvider';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <DataProvider>\n      <App />\n    </DataProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}