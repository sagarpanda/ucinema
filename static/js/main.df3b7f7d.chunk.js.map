{"version":3,"sources":["utils/fetchGoogleSheet.js","components/DataProvider.js","utils/routes.js","hooks/useSearch.js","containers/AppMenu.js","components/VideoCard.js","components/VideoCardGroup.js","containers/Home.js","containers/Movies.js","containers/TvSeries.js","containers/WatchVideo.js","App.js","serviceWorker.js","index.js"],"names":["a","spreadsheetId","sheetNum","tab","fetchUrl","fetch","then","response","status","json","feed","entry","data","rowData","reduce","prev","curr","row","col","content","rowIndex","colIndex","fetchGoogleSheet","DataContext","React","createContext","DataProvider","props","useState","isLoading","setRowData","useEffect","dd","d","col10","push","id","col0","title","col1","desc","col2","url","col3","imgUrl","col4","widerImgUrl","col5","category","col6","type","col7","createdDate","col8","imdbID","col9","Provider","value","children","routes","baseRoute","useSearch","records","loading","results","setData","history","useHistory","handleSearchChange","useCallback","e","filter","item","toLowerCase","indexOf","handleResultSelect","result","withRouter","activeItem","location","pathname","values","useContext","Menu","fixed","inverted","Item","header","as","Link","name","active","href","to","position","Responsive","Search","onSearchChange","onResultSelect","minWidth","Container","maxWidth","style","padding","marginTop","input","width","paddingBottom","VideoCard","gUrl","Card","className","Image","size","src","wrapped","ui","Content","Description","VideoCardGroup","list","Group","map","key","Home","Movies","movies","TvSeries","series","WatchVideo","useParams","imdbInfo","setImdbInfo","extras","placeholder","Segment","Header","Subheader","Embed","source","iframe","allowFullScreen","items","image","Poster","Title","description","Plot","meta","Year","Released","Genre","Director","Writer","extra","App","exact","path","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.df3b7f7d.chunk.js","sourcesContent":["async function fetchGoogleSheet({spreadsheetId, sheetNum}) {\n  const tab = sheetNum || 1;\n  const fetchUrl = `https://spreadsheets.google.com/feeds/cells/${spreadsheetId}/${tab}/public/full?alt=json`;\n  const data = await fetch(fetchUrl).then(response => {\n    if(response.status === 200) {\n      return response.json();\n    } else {\n      return { feed: { entry: [] }};\n    }\n  });\n  // let count = 0;\n  const rowData = data.feed.entry.reduce((prev, curr) => {\n     const { row, col } = curr['gs$cell'];\n     const content = curr.content['$t'];\n     const rowIndex = row - 1;\n     const colIndex = col - 1;\n     if(prev[rowIndex]) {\n       prev[rowIndex][`col${colIndex}`] = content;\n     } else {\n       prev[rowIndex] = { [`col${colIndex}`]: content };\n     }\n     return prev;\n  }, []);\n  return rowData;\n}\n\nexport default fetchGoogleSheet;","import React, { useState, useEffect } from 'react';\nimport fetchGoogleSheet from '../utils/fetchGoogleSheet';\n\nconst DataContext = React.createContext({});\n\nconst DataProvider = (props) => {\n    const [ rowData, setRowData ] = useState({ isLoading: true, data: [] });\n    useEffect(() => {\n        fetchGoogleSheet({\n            spreadsheetId: '1xqxT4Q0Zh4n9W5GYew-ltxfb4oG42icVlHQEX_RErQE',\n            sheetNum: 1\n        }).then(dd => {\n            const data = dd.reduce((prev, d) => {\n                const hidden = d.col10 ? true : false;\n                if(!hidden) {\n                    prev.push({\n                        id: d.col0,\n                        title: d.col1,\n                        desc: d.col2,\n                        url: d.col3,\n                        imgUrl: d.col4,\n                        widerImgUrl: d.col5,\n                        category: d.col6,\n                        type: d.col7,\n                        createdDate: d.col8,\n                        imdbID: d.col9\n                    });\n                }\n                return prev;\n            }, []);\n            setRowData({ isLoading: false, data });\n            return data;\n        });\n    }, [])\n    return (\n        <DataContext.Provider value={rowData}>\n          {props.children}\n        </DataContext.Provider>\n    );\n};\n\nexport { DataContext };\n\nexport default DataProvider;","const routes = {\n  baseRoute: ''\n};\n\nexport default routes;","import { useState, useCallback } from 'react';\nimport { useHistory } from \"react-router-dom\";\n\nconst useSearch = (records) => {\n  const initData = { loading: false, value: '', results: [] };\n\n  const [ data, setData ] = useState(initData);\n  const history = useHistory();\n\n  const handleSearchChange = useCallback((e, { value }) => {\n    setData({ loading: true, value, results: [] });\n    const results = records.filter(item => item.title.toLowerCase().indexOf(value) > -1);\n    setData({ loading: false, value, results });\n  }, [records]);\n\n  const handleResultSelect = useCallback((e, { result }) => {\n    setData({ loading: false, value: '', results: [] });\n    history.push(`/watch/${result.id}`);\n  }, [history]);\n\n  return {\n    data,\n    handleSearchChange,\n    handleResultSelect\n  }\n};\n\nexport default useSearch;","import React, { useContext } from 'react';\nimport { Menu, Search, Responsive, Container } from 'semantic-ui-react';\nimport { withRouter } from \"react-router\";\nimport { Link } from \"react-router-dom\";\nimport { DataContext } from '../components/DataProvider';\nimport routes from \"../utils/routes\";\nimport useSearch from '../hooks/useSearch';\n\nconst baseRoute = routes.baseRoute;\nconst bottomSpacing = '20px';\n\nconst AppMenu = ({ location }) => {\n    const activeItem = location.pathname;\n    const values = useContext(DataContext);\n\n    const { data, handleSearchChange, handleResultSelect } = useSearch(values.data);\n    \n    return (\n      <>\n        <Menu fixed='top' inverted>\n          <Menu.Item header>uCinema</Menu.Item>\n          <Menu.Item\n            as={Link}\n            name='home'\n            active={activeItem === `${baseRoute}/`}\n            href={`${baseRoute}/`}\n            to={`${baseRoute}/`}\n          />\n          <Menu.Item\n            as={Link}\n            name='movies'\n            active={activeItem === `${baseRoute}/movies`}\n            href={`${baseRoute}/movies`}\n            to={`${baseRoute}/movies`}\n          />\n          <Menu.Item\n            as={Link}\n            name='tv-series'\n            active={activeItem === `${baseRoute}/tv-series`}\n            href={`${baseRoute}/tv-series`}\n            to={`${baseRoute}/tv-series`}\n          />\n          <Menu.Menu position='right'>\n            <Menu.Item>\n              <Responsive\n                as={Search}\n                loading={data.loading}\n                results={data.results}\n                value={data.value}\n                onSearchChange={handleSearchChange}\n                onResultSelect={handleResultSelect}\n                minWidth={550}\n              />\n            </Menu.Item>\n          </Menu.Menu>\n        </Menu>\n        <Responsive\n          as={Container}\n          maxWidth={550}\n          style={{ padding: `${bottomSpacing} 0`, marginTop: '40px' }}>\n          <Search\n            loading={data.loading}\n            results={data.results}\n            value={data.value}\n            onSearchChange={handleSearchChange}\n            onResultSelect={handleResultSelect}\n            minWidth={550}\n            input={{ style: { width: '100%' } }}\n          />\n        </Responsive>\n        <Responsive\n          as=\"div\"\n          minWidth={550}\n          style={{ paddingBottom: bottomSpacing, marginTop: '64px' }}\n        />\n      </>\n    );\n};\n\nexport default withRouter(AppMenu);","import React from 'react';\nimport { Card, Image } from 'semantic-ui-react';\nimport { Link } from \"react-router-dom\";\nimport routes from \"./../utils/routes\"\nimport './VideoCard.css';\n\nconst baseRoute = routes.baseRoute;\n\nconst VideoCard = ({ id, title, imgUrl, createdDate }) => {\n    const gUrl = imgUrl || 'https://i.imgur.com/0FX7ZPe.jpg';\n    return (\n        <Card as={Link} href={`${baseRoute}/watch/${id}`} to={`${baseRoute}/watch/${id}`} className=\"video-card\">\n            <Image className=\"fixed-height\" size=\"medium\" src={gUrl} wrapped ui={false} />\n            <Card.Content className=\"content-over-image\">\n                {/*<Card.Meta>\n                    <span className='date'>Added on {createdDate}</span>\n                </Card.Meta>*/}\n                <Card.Description className=\"color-white\">\n                {title}\n                </Card.Description>\n            </Card.Content>\n        </Card>\n    );\n};\n\nexport default VideoCard;","import React from 'react';\nimport { Card } from 'semantic-ui-react';\nimport VideoCard from '../components/VideoCard';\n\nconst VideoCardGroup = ({ list }) => {\n  return (\n    <Card.Group>\n        {\n            list.map(item => (\n              <VideoCard\n                key={item.id}\n                id={item.id}\n                title={item.title}\n                imgUrl={item.imgUrl}\n                createdDate={item.createdDate}\n              />\n            ))\n        }\n    </Card.Group>\n  );\n};\n\nexport default VideoCardGroup;","import React, { useContext } from 'react';\nimport { Container } from 'semantic-ui-react';\nimport { DataContext } from '../components/DataProvider';\nimport VideoCardGroup from '../components/VideoCardGroup';\n\nconst Home = () => {\n    const values = useContext(DataContext);\n    \n    return (\n        <Container>\n            <VideoCardGroup list={values.data} />\n        </Container>\n    );\n};\n\nexport default Home;","import React, { useContext } from 'react';\nimport { Container } from 'semantic-ui-react';\nimport { DataContext } from '../components/DataProvider';\nimport VideoCardGroup from '../components/VideoCardGroup';\n\nconst Movies = () => {\n    const values = useContext(DataContext);\n    const movies = values.data.filter(item => item.category === 'movie');\n\n    return (\n        <Container>\n            <VideoCardGroup list={movies} />\n        </Container>\n    );\n};\n\nexport default Movies;","import React, { useContext } from 'react';\nimport { Container } from 'semantic-ui-react';\nimport { DataContext } from '../components/DataProvider';\nimport VideoCardGroup from '../components/VideoCardGroup';\n\nconst TvSeries = () => {\n    const values = useContext(DataContext);\n    const series = values.data.filter(item => item.category === 'series');\n\n    return (\n        <Container>\n            <VideoCardGroup list={series} />\n        </Container>\n    );\n};\n\nexport default TvSeries;","import React, { useContext, useEffect, useState } from 'react';\nimport { useParams } from 'react-router';\nimport { Header, Container, Segment, Image, Item, Embed } from 'semantic-ui-react';\nimport { DataContext } from '../components/DataProvider';\n\nconst WatchVideo = () => {\n    const values = useContext(DataContext);\n    const { name } = useParams();\n    \n    const item = values.data.filter(d => name === d.id)[0];\n    const [ imdbInfo, setImdbInfo ] = useState(null);\n\n    useEffect(() => {\n        if(item && item.imdbID) {\n            fetch(`http://www.omdbapi.com/?i=${item.imdbID}&apikey=c11086ed&plot=full`)\n                .then(response => response.json())\n                .then(data => setImdbInfo(data));\n        }\n    }, [item]);\n\n    const extras = item && item.widerImgUrl ? { placeholder: item.widerImgUrl } : {};\n\n    return (\n        <Container>\n            { values.isLoading && (\n                <Segment loading>\n                    <Image src='https://react.semantic-ui.com/images/wireframe/paragraph.png' />\n                </Segment>\n            )}\n            { item && (\n                <Header as='h2'>\n                    {item.title}\n                    <Header.Subheader>\n                    {item.desc}\n                    </Header.Subheader>\n                </Header>\n            ) }\n            { item && (item.type === 'youtube' ? (<Embed\n                    id={item.url}\n                    source='youtube'\n                    iframe={{ allowFullScreen: true }}\n                    {...extras}\n                />) : (<Embed\n                    url={item.url}\n                    iframe={{ allowFullScreen: true }}\n                    {...extras}\n                />))\n            }\n            { imdbInfo && (\n                    <Item.Group\n                        items={[{\n                            image: imdbInfo.Poster,\n                            header: imdbInfo.Title,\n                            description: imdbInfo.Plot,\n                            meta: (\n                            <div>\n                                <b>Year:</b> {imdbInfo.Year} <br />\n                                <b>Released:</b> {imdbInfo.Released} <br />\n                                <b>Genre:</b> {imdbInfo.Genre} <br />\n                                <b>Director:</b> {imdbInfo.Director} <br />\n                                <b>Writer:</b> {imdbInfo.Writer}\n                            </div>\n                            ),\n                            extra: '',\n                        }]}\n                    />\n                )\n            }\n            <br /><br /><br />\n        </Container>\n    );\n};\n\nexport default WatchVideo;","import React from 'react';\nimport { HashRouter as Router, Switch, Route } from \"react-router-dom\";\nimport 'semantic-ui-css/semantic.min.css';\nimport AppMenu from './containers/AppMenu';\nimport Home from './containers/Home';\nimport Movies from './containers/Movies';\nimport TvSeries from './containers/TvSeries';\nimport WatchVideo from './containers/WatchVideo';\nimport routes from \"./utils/routes\"\n\nconst baseRoute = routes.baseRoute;\n\nfunction App() {\n  return (\n    <Router>\n      <div>\n        <AppMenu />\n        <Switch>\n          <Route exact path={`${baseRoute}/`}>\n            <Home />\n          </Route>\n          <Route path={`${baseRoute}/movies`}>\n            <Movies />\n          </Route>\n          <Route path={`${baseRoute}/tv-series`}>\n            <TvSeries />\n          </Route>\n          <Route path={`${baseRoute}/watch/:name`}>\n            <WatchVideo />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import './index.css';\nimport DataProvider from './components/DataProvider';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <DataProvider>\n      <App />\n    </DataProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}